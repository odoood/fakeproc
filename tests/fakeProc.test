#
# Tests for fakeProc package
#

# Setup global vars
set SCRIPTDIR [file dirname [info script]]
set TARGET_SCRIPTDIR [file normalize [file join $SCRIPTDIR ".."]]

# Source the packages index & load packages
set dir $TARGET_SCRIPTDIR
source [file join $TARGET_SCRIPTDIR pkgIndex.tcl]
unset dir

package require tcltest 2.2
package require fakeProc 1.0

namespace eval ::fakeProc::test {
    namespace import ::tcltest::*
    namespace import ::fakeProc::*

    variable SETUP_NS {::foobar}
    variable SETUP_PROC_NAME "$SETUP_NS"
    append SETUP_PROC_NAME {::fooproc}

    variable SETUP {
        namespace eval $SETUP_NS {}
        proc $SETUP_PROC_NAME {} {}
    }

    variable CLEANUP {
        if {[namespace exists $SETUP_NS]} {
            namespace delete $SETUP_NS
        }
        if {[namespace exists $::fakeProc::BACKUPNS]} {
            namespace delete $::fakeProc::BACKUPNS
        }
    }
    #
    # procFake tests
    #
    test procFake-1.0 {} -body {
        procFake {} {} {}
    } -returnCodes error -result "Name cannot be empty"

    test procFake-1.1 {} -body {
        procFake "\t  \n" {} {}
    } -returnCodes error -result "Name cannot be empty"

    test procFake-1.2 {
        Force a fully-qualified name, i.e. starts with '::'
    } -body {
        procFake fooproc {} {}
    } -returnCodes error -result "Name not fully-qualified: 'fooproc'"

    test procFake-1.3 {
        Force a fully-qualified name, i.e. starts with '::'
    } -body {
        procFake foobar::fooproc {} {}
    } -returnCodes error -result "Name not fully-qualified: 'foobar::fooproc'"

    test procFake-1.4 {} -body {
        procFake ::foobar::fooproc {} {}
    } -returnCodes error -result "Unknown namespace: '::foobar'"

    test procFake-2.0 {} -body {
        procFake ::foobar::fooproc {} {}
        return [namespace which ::foobar::fooproc]
    } -setup {
        namespace eval ::foobar {}
    } -cleanup {
        namespace delete ::foobar
    } -result "::foobar::fooproc"

    test procFake-3.0 {
        If name is valid then the proc should be added to the backup namespace
        under fakeProc namespace with the same name path
    } -setup $SETUP -body {

        procFake $SETUP_PROC_NAME {} {}
        set backup {::fakeProc::backup}
        append backup $SETUP_PROC_NAME

        return [namespace which $backup]

    } -result "::fakeProc::backup$SETUP_PROC_NAME" -cleanup $CLEANUP

    test procFake-4.0 {
        If the args argument is '*' make all formal args of created fake proc
        the same as the real proc
    } -setup $SETUP -body {

        # Set default formal args for target proc
        proc $SETUP_PROC_NAME {one two andThree} {}

        procFake $SETUP_PROC_NAME {*} {}

        return [info args $SETUP_PROC_NAME]

    } -result {one two andThree} -cleanup $CLEANUP

    test procFake-4.1 {} -body {

        procFake $SETUP_PROC_NAME {foo1 foo2 foo3} {}

        return [info args $SETUP_PROC_NAME]

    } -result {foo1 foo2 foo3} -setup $SETUP -cleanup $CLEANUP

    test procFake-4.2 {
        If args has formal default values fake proc should preserve them
    } -body {

        procFake $SETUP_PROC_NAME {foo1 foo2 {foo3 "foobar"}} {}

        set procArgs [info args $SETUP_PROC_NAME]

        # Get the default value specifically with info default & format
        info default $SETUP_PROC_NAME foo3 defVal

        lset procArgs 2 "foo3 \"$defVal\""

    } -result {foo1 foo2 {foo3 "foobar"}} -setup $SETUP -cleanup $CLEANUP

    test procFake-4.3 {
        If the name does not exist in the namespace but exists in the global \
        namespace, and args value is '*' make all formal args of fake proc the \
        same as the global proc
    } -setup {
        # Create a dummy global proc
        proc ::foobarGlobal {fooglo1 fooglo2} {}

        # Create namespace to make fake in
        namespace eval ::foospace {}

    } -body {

        # Set default formal args for target proc
        procFake ::foospace::foobarGlobal {*} {}

        return [info args ::foospace::foobarGlobal]

    } -result {fooglo1 fooglo2} -cleanup {
        namespace delete ::foospace
        rename ::foobarGlobal {}
    }

    test procFake-5.0 {
        With valid name and body fake proc body always matches
    } -body {

        procFake $SETUP_PROC_NAME {} {puts "This is a fake."}

        return [info body $SETUP_PROC_NAME]

    } -result {puts "This is a fake."} -setup $SETUP -cleanup $CLEANUP

    test procFake-5.1 {
        If the name does not exist in the namespace or in the global namespace,\
        and args value is '*' make one formal argument "args" to capture all \
        argument values by default
    } -setup {namespace eval ::foospace {}} -body {

        # Set default formal args for target proc
        procFake ::foospace::fooproc {*} {}

        return [info args ::foospace::fooproc]

    } -result {args} -cleanup {namespace delete ::foospace}

    test procFake-5.2 {
        If the name exists only in the global namespace, and args value is '*'\
        ensure all formal argument defaults are set in fake proc
    } -setup {
        # Create a dummy global proc
        proc ::fooGlo {farg1 {farg2 "foo"} {farg3 "bar"}} {}

        # Create namespace to make fake in
        namespace eval ::foospace {}

    } -body {

        # Set default formal args for target proc
        procFake ::foospace::fooGlo {*} {}
        set formals [info args ::foospace::fooGlo]
        set defaults {}
        set defVal {}

        foreach form $formals {

            if {[info default ::foospace::fooGlo $form defVal]} {
                lappend defaults $defVal
            }
        }

        return [concat $formals $defaults]

    } -cleanup {
        namespace delete ::foospace
        rename ::fooGlo {}
        eval $CLEANUP
    } -result {farg1 farg2 farg3 foo bar}

    #
    # resetProc tests
    #

    test resetProc-1.0 {} -body {
        resetProc fooproc
    } -returnCodes error -result "Name not fully-qualified: 'fooproc'"

    test resetProc-1.1 {Regardless of the existence of the named proc, if fake\
        has not been created (i.e. no call to procFake with name), then error
    } -body {
        resetProc ::foospace::fooproc
    } -returnCodes error -result "No fake created for '::foospace::fooproc'"

    cleanupTests
}
namespace delete ::fakeProc::test
