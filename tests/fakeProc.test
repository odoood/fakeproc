#
# Tests for fakeProc package
#

# Setup global vars
set SCRIPTDIR [file dirname [info script]]
set TARGET_SCRIPTDIR [file normalize [file join $SCRIPTDIR ".."]]

# Source the packages index & load packages
set dir $TARGET_SCRIPTDIR
source [file join $TARGET_SCRIPTDIR pkgIndex.tcl]
unset dir

package require tcltest 2.2
package require fakeProc 1.0

namespace eval ::fakeProc::test {
    namespace import ::tcltest::*
    namespace import ::fakeProc::*

    variable SETUP_NS {::foobar}
    variable SETUP_PROC_NAME "$SETUP_NS"
    append SETUP_PROC_NAME {::fooproc}

    variable SETUP {
        namespace eval $SETUP_NS {}
        proc $SETUP_PROC_NAME {} {}
    }

    variable CLEANUP {
        if {[namespace exists $SETUP_NS]} {
            namespace delete $SETUP_NS
        }
    }
    #
    # procFake tests
    #
    test procFake-1.0 {} -body {
        procFake {} {} {}
    } -returnCodes error -result "Name cannot be empty"

    test procFake-1.1 {} -body {
        procFake "\t  \n" {} {}
    } -returnCodes error -result "Name cannot be empty"

    test procFake-1.2 {
        Force a fully-qualified name, i.e. starts with '::'
    } -body {
        procFake fooproc {} {}
    } -returnCodes error -result "Name not fully-qualified: 'fooproc'"

    test procFake-1.3 {
        Force a fully-qualified name, i.e. starts with '::'
    } -body {
        procFake foobar::fooproc {} {}
    } -returnCodes error -result "Name not fully-qualified: 'foobar::fooproc'"

    test procFake-1.4 {} -body {
        procFake ::foobar::fooproc {} {}
    } -returnCodes error -result "Unknown namespace: '::foobar'"

    test procFake-2.0 {} -body {
        procFake ::foobar::fooproc {} {}
    } -setup {
        namespace eval ::foobar {}
    } -cleanup {
        namespace delete ::foobar
    } -returnCodes error -result "Unknown command: '::foobar::fooproc'"

    test procFake-3.0 {
        If name is valid then the proc should be added to the backup namespace
        under fakeProc namespace with the same name path
    } -setup $SETUP -body {

        procFake $SETUP_PROC_NAME {} {}
        set backup {::fakeProc::backup}
        append backup $SETUP_PROC_NAME

        return [namespace which $backup]

    } -result "::fakeProc::backup$SETUP_PROC_NAME" -cleanup $CLEANUP

    cleanupTests
}
namespace delete ::fakeProc::test
